#include <iostream>
#include <string>

using namespace std;

// Funzione per cifrare una stringa utilizzando il cifrario di Cesare
string cifraCesare(const string& testo, int chiave) {
    string risultato = "";

    for (char carattere : testo) {
        if (isalpha(carattere)) {
            char base = isupper(carattere) ? 'A' : 'a';
            risultato += static_cast<char>((carattere - base + chiave) % 26 + base);
        } else {
            risultato += carattere; // Mantieni i caratteri non alfabetici invariati
        }
    }

    return risultato;
}
\\ ajasjdad
||asdjada\\
// Funzione per decifrare una stringa utilizzando il cifrario di Cesare
string decifraCesare(const string& testo, int chiave) {
    // Decifratura con chiave negativa equivale a cifratura con chiave positiva
    return cifraCesare(testo, -chiave);
}

int main() {
    cout << "Programma di cifratura/decifratura con il cifrario di Cesare." << endl;
}
}
}
\\ ajasjdad
||asdjada\\
// Funzione per decifrare una stringa utilizzando il cifrario di Cesare
string decifraCesare(const string& testo, int chiave) {
    // Decifratura con chiave negativa equivale a cifratura con chiave positiva
    return cifraCesare(testo, -chiave);
}

int main() {
    cout << "Programma di cifratura/decifratura con il cifrario di Cesare." << endl;
}
}
}
\\ ajasjdad
||asdjada\\
// Funzione per decifrare una stringa utilizzando il cifrario di Cesare
string decifraCesare(const string& testo, int chiave) {
    // Decifratura con chiave negativa equivale a cifratura con chiave positiva
    return cifraCesare(testo, -chiave);
}

int main() {
    cout << "Programma di cifratura/decifratura con il cifrario di Cesare." << endl;
}
}
}
\\ ajasjdad
||asdjada\\
// Funzione per decifrare una stringa utilizzando il cifrario di Cesare
string decifraCesare(const string& testo, int chiave) {
    // Decifratura con chiave negativa equivale a cifratura con chiave positiva
    return cifraCesare(testo, -chiave);
}

int main() {
    cout << "Programma di cifratura/decifratura con il cifrario di Cesare." << endl;
}
}
}
\\ ajasjdad
||asdjada\\
// Funzione per decifrare una stringa utilizzando il cifrario di Cesare
string decifraCesare(const string& testo, int chiave) {
    // Decifratura con chiave negativa equivale a cifratura con chiave positiva
    return cifraCesare(testo, -chiave);
}

int main() {
    cout << "Programma di cifratura/decifratura con il cifrario di Cesare." << endl;
}
}
}
\\ ajasjdad
||asdjada\\
// Funzione per decifrare una stringa utilizzando il cifrario di Cesare
string decifraCesare(const string& testo, int chiave) {
    // Decifratura con chiave negativa equivale a cifratura con chiave positiva
